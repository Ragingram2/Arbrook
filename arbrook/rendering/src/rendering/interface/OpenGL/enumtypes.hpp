#pragma once
#include "rendering/interface/OpenGL/oglincludes.hpp"

namespace rythe::rendering::internal
{
	enum class ShaderType
	{
		VERTEX = GL_VERTEX_SHADER,
		FRAGMENT = GL_FRAGMENT_SHADER,
		GEOMETRY,
		HULL,
		COMPUTE
	};

	enum class TargetType : GLenum
	{
		VERTEX_BUFFER = GL_ARRAY_BUFFER,
		INDEX_BUFFER = GL_ELEMENT_ARRAY_BUFFER,
		CONSTANT_BUFFER = GL_UNIFORM_BUFFER,
		TEXTURE2D = GL_TEXTURE_2D
	};

	enum class UsageType
	{
		DEFAULT = GL_DYNAMIC_DRAW,
		IMMUTABLE = 0,
		STATICDRAW = GL_STATIC_DRAW,
		STAGING = GL_STREAM_DRAW
	};

	enum class PrimitiveType
	{
		TRIANGLESLIST = GL_TRIANGLES,
		TRIANGLESTRIP = GL_TRIANGLE_STRIP,
		LINELIST = GL_LINES,
		LINESTRIP = GL_LINE_STRIP,
		POINTLIST = GL_POINTS
	};

	enum class DataType
	{
		INT = GL_INT,
		UINT = GL_UNSIGNED_INT,
		BYTE = GL_BYTE,
		UBYTE = GL_UNSIGNED_BYTE,
		SHORT = GL_SHORT,
		USHORT = GL_UNSIGNED_SHORT,
		FLOAT = GL_FLOAT
	};

	enum class FormatType
	{
		RG32F = GL_RG32F,
		RGB32F = GL_RGB32F,
		RGBA32F = GL_RGBA32F,
		R32U = GL_R32UI,
		RGBA8UN = GL_RGBA8_SNORM
	};

	enum class WrapMode
	{
		CLAMP = GL_CLAMP,
		CLAMP_TO_EDGE = GL_CLAMP_TO_EDGE,
		CLAMP_TO_BORDER = GL_CLAMP_TO_BORDER,
		REPEAT = GL_REPEAT
	};

	enum class FilterMode
	{
		NEAREST = GL_NEAREST,
		LINEAR = GL_LINEAR,
		NEAREST_MIPMAP_NEAREST = GL_NEAREST_MIPMAP_NEAREST,
		NEAREST_MIPMAP_LINEAR = GL_NEAREST_MIPMAP_LINEAR,
		LINEAR_MIPMAP_NEAREST = GL_LINEAR_MIPMAP_NEAREST,
		LINEAR_MIPMAP_LINEAR = GL_LINEAR_MIPMAP_LINEAR
	};

	enum class ClearBit
	{
		COLOR = GL_COLOR_BUFFER_BIT,
		DEPTH = GL_DEPTH_BUFFER_BIT,
		STENCIL = GL_STENCIL_BUFFER_BIT,
		COLOR_DEPTH = GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT,
		DEPTH_STENCIL = GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT,
		COLOR_DEPTH_STENCIL = GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_DEPTH_BUFFER_BIT
	};

	enum class DepthFuncs
	{
		ALWAYS = GL_ALWAYS,
		NEVER = GL_NEVER,
		LESS = GL_LESS,
		EQUAL = GL_EQUAL,
		LESS_EQUAL = GL_LEQUAL,
		GREATER = GL_GREATER,
		NOT_EQUAL = GL_NOTEQUAL,
		GREATER_EQUAL = GL_GEQUAL
	};

	enum class StencilOp
	{
		KEEP = GL_KEEP,
		ZERO = GL_ZERO,
		REPLACE = GL_REPLACE,
		INCR = GL_INCR,
		INCR_WRAP = GL_INCR_WRAP,
		DECR = GL_DECR,
		DECR_WRAP = GL_DECR_WRAP,
		INVERT = GL_INVERT
	};

	enum class Face
	{
		FRONT = GL_FRONT,
		BACK = GL_BACK,
		FRONT_BACK = GL_FRONT_AND_BACK
	};

	enum class InputClass
	{
		PER_VERTEX = 0,
		PER_INSTANCE = 1
	};
}