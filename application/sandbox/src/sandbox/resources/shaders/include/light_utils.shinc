#define NR_POINT_LIGHTS 8

SamplerState TexSampler0 : register(s0);
SamplerState TexSampler1 : register(s1); 
Texture2D Texture0 : register(t0);
Texture2D Texture1 : register(t1);

struct Light
{
	float4 direction;
	float4 position;
	float4 color;
	float range;
	float intensity;
};

cbuffer LightBuffer : register(b1)
{
	Light u_lights[NR_POINT_LIGHTS + 1];
};

cbuffer MaterialBuffer : register(b2)
{
	float u_shininess;
};

float Attenuation(float3 lightPosition, float3 fragPos, float attenuationRadius, float lightIntensity)
{
	float sqrlightDistance = pow(length(lightPosition - fragPos), 2);
	float attenuation = pow(max(1.0 - (sqrlightDistance / (attenuationRadius * attenuationRadius)), 0.0), 2);
	return attenuation * lightIntensity;
}

float3 CalcDirLight(Light light, float3 normal, float2 texCoords, float3 viewDir, Texture2D Diffuse, Texture2D Specular)
{
	float3 lightDir = normalize(-light.direction.xyz);
    //diffuse
    float diff = max(dot(normal, lightDir),0.0);
    //specular
    float3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir),0.0), u_shininess);

    //combine results
    float3 ambient = light.color.rgb * float3(0.1,0.1,0.1) * Diffuse.Sample(TexSampler0, texCoords).rgb;
    float3 diffuse = light.color.rgb * diff * Diffuse.Sample(TexSampler0, texCoords).rgb;
    float3 specular = light.color.rgb * spec * Specular.Sample(TexSampler1, texCoords).rgb;


    return float3(ambient + diffuse + specular);
}

float3 CalcPointLight(Light light, float3 normal, float2 texCoords, float3 fragPos,float3 viewDir, Texture2D Diffuse, Texture2D Specular)
{
    float3 lightDir = normalize(light.position.xyz - fragPos);

    //diffuse
    float diff = max(dot(normal, lightDir),0.0);
    //specular
    float3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), u_shininess);

    float attenuation = Attenuation(light.position.xyz, fragPos, light.range, light.intensity);
    if(attenuation <= 0)
        return float3(0.0,0.0,0.0);

    //combine results
    float3 ambient = light.color.rgb * float3(0.1,0.1,0.1) * Diffuse.Sample(TexSampler0, texCoords).rgb;
    float3 diffuse = light.color.rgb * diff * Diffuse.Sample(TexSampler0, texCoords).rgb;
    float3 specular = light.color.rgb * spec * Specular.Sample(TexSampler1, texCoords).rgb;


    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;

    return float3(ambient + diffuse + specular);
}

